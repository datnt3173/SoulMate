// <auto-generated />
using System;
using DataAccessLayer.ApplicationDBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(SoulMateIdentittyDBContext))]
    [Migration("20240426153045_db1")]
    partial class db1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entities.ChatRooms", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifieBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifieDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ExtraInformation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AcademicLevel")
                        .HasColumnType("int");

                    b.Property<int>("ChildDesire")
                        .HasColumnType("int");

                    b.Property<int>("CommunicationStyle")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifieBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifieDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonalityType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Zodiac")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("ExtraInformation");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Information", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentPlaceOfResidence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DatingPurposes")
                        .HasColumnType("int");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("IDUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Interests")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("ModifieBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifieDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonalPronouns")
                        .HasColumnType("int");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SexualOrientation")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("Information");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Intermediate.UserChatRooms", b =>
                {
                    b.Property<Guid>("IDChatRoom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifieBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifieDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IDChatRoom", "IDUser");

                    b.HasIndex("IDUser");

                    b.ToTable("UserChatRooms");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Intermediate.UserMessages", b =>
                {
                    b.Property<Guid>("IDMessage")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IDUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifieBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifieDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IDMessage", "IDUser");

                    b.HasIndex("IDUser");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Messages", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IDReceiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IDSender")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ModifieBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifieDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IDReceiver");

                    b.HasIndex("IDSender");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.StyleOfLife", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AlcoholConsumption")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DietHabit")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseHabit")
                        .HasColumnType("int");

                    b.Property<string>("IDUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifieBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifieDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PetType")
                        .HasColumnType("int");

                    b.Property<int>("SleepHabit")
                        .HasColumnType("int");

                    b.Property<int>("SmokingHabit")
                        .HasColumnType("int");

                    b.Property<int>("SocialMediaActivityLevel")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IDUser")
                        .IsUnique();

                    b.ToTable("StyleOfLife");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "428b3a8c-0dd4-48c1-84d7-65e85bb8caa9",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "21749d45-f2ce-4387-b4b2-cbe766e65a4a",
                            Name = "Client",
                            NormalizedName = "Client"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+AcademicLevel>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<AcademicLevel>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+AlcoholConsumption>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<AlcoholConsumption>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+ChildDesire>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<ChildDesire>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+CommunicationStyle>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<CommunicationStyle>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+DatingPurposes>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<DatingPurposes>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+DietHabit>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<DietHabit>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+ExerciseHabit>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<ExerciseHabit>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+Gender>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<Gender>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+Interests>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<Interests>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+Language>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<Language>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+PersonalPronouns>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<PersonalPronouns>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+PersonalityType>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<PersonalityType>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+PetType>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<PetType>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+SexualOrientation>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<SexualOrientation>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+SleepHabit>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<SleepHabit>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+SmokingHabit>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<SmokingHabit>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+SocialMediaActivityLevel>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<SocialMediaActivityLevel>");
                });

            modelBuilder.Entity("System.Collections.Generic.List<DataAccessLayer.Entities.Base.EnumBase+Zodiac>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<Zodiac>");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstAndLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ExtraInformation", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("ExtraInformation")
                        .HasForeignKey("DataAccessLayer.Entities.ExtraInformation", "IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Information", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Information")
                        .HasForeignKey("DataAccessLayer.Entities.Information", "IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Intermediate.UserChatRooms", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ChatRooms", "ChatRooms")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("IDChatRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("UserChatRooms")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("ChatRooms");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Intermediate.UserMessages", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Messages", "Messages")
                        .WithMany("UserMessages")
                        .HasForeignKey("IDMessage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("UserMessages")
                        .HasForeignKey("IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Messages", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("IDReceiver")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("IDSender")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.StyleOfLife", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("StyleOfLife")
                        .HasForeignKey("DataAccessLayer.Entities.StyleOfLife", "IDUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ChatRooms", b =>
                {
                    b.Navigation("UserChatRooms");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Messages", b =>
                {
                    b.Navigation("UserMessages");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ExtraInformation")
                        .IsRequired();

                    b.Navigation("Information")
                        .IsRequired();

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("StyleOfLife")
                        .IsRequired();

                    b.Navigation("UserChatRooms");

                    b.Navigation("UserMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
